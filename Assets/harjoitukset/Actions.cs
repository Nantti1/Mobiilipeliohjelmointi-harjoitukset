//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/harjoitukset/Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Actions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Actions"",
    ""maps"": [
        {
            ""name"": ""Controls"",
            ""id"": ""3aee38cd-0fd6-4225-8fb5-28de4e684fe4"",
            ""actions"": [
                {
                    ""name"": ""OnMove"",
                    ""type"": ""Value"",
                    ""id"": ""6abb7b16-92e2-4e43-ab38-75b562f88f5a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""83238ec0-268a-427c-8221-ef74a23a361c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""04e0b898-bc4e-4f62-b678-a00f1d784c60"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""55ec3ff5-50ef-4bf3-8af8-74ea838d43cb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""controls"",
                    ""action"": ""OnMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""eaf874c2-aa67-4cd4-a3b7-06458f2f2de8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""controls"",
                    ""action"": ""OnMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""651450f3-4f51-41f9-a913-9cddf979c76f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""OnMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2625e2e3-77c3-4ae6-b328-8e4563c0d2bf"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""OnMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""723e41e9-d260-4dc7-b7dc-b743b6c6c96b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""controls"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Launch"",
            ""id"": ""fec819ef-0731-4f13-84d1-6dbe3b3c9b58"",
            ""actions"": [
                {
                    ""name"": ""Launch"",
                    ""type"": ""Button"",
                    ""id"": ""08c6c824-72f2-4c04-9b2d-e5d1a1580e28"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""31f6aa38-d8ba-4009-82de-6dde68f96ac5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""controls"",
                    ""action"": ""Launch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameTouch"",
            ""id"": ""43bcc714-8c8f-419e-9982-321272118e16"",
            ""actions"": [
                {
                    ""name"": ""TapMove"",
                    ""type"": ""Value"",
                    ""id"": ""975bce87-b055-4207-994c-69820eee3878"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d6871d7e-d9b8-458f-94ca-692d6f7feaec"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""TapMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""controls"",
            ""bindingGroup"": ""controls"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touchscreen"",
            ""bindingGroup"": ""Touchscreen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Controls
        m_Controls = asset.FindActionMap("Controls", throwIfNotFound: true);
        m_Controls_OnMove = m_Controls.FindAction("OnMove", throwIfNotFound: true);
        m_Controls_Jump = m_Controls.FindAction("Jump", throwIfNotFound: true);
        // Launch
        m_Launch = asset.FindActionMap("Launch", throwIfNotFound: true);
        m_Launch_Launch = m_Launch.FindAction("Launch", throwIfNotFound: true);
        // GameTouch
        m_GameTouch = asset.FindActionMap("GameTouch", throwIfNotFound: true);
        m_GameTouch_TapMove = m_GameTouch.FindAction("TapMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controls
    private readonly InputActionMap m_Controls;
    private IControlsActions m_ControlsActionsCallbackInterface;
    private readonly InputAction m_Controls_OnMove;
    private readonly InputAction m_Controls_Jump;
    public struct ControlsActions
    {
        private @Actions m_Wrapper;
        public ControlsActions(@Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnMove => m_Wrapper.m_Controls_OnMove;
        public InputAction @Jump => m_Wrapper.m_Controls_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsActions set) { return set.Get(); }
        public void SetCallbacks(IControlsActions instance)
        {
            if (m_Wrapper.m_ControlsActionsCallbackInterface != null)
            {
                @OnMove.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnOnMove;
                @OnMove.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnOnMove;
                @OnMove.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnOnMove;
                @Jump.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_ControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @OnMove.started += instance.OnOnMove;
                @OnMove.performed += instance.OnOnMove;
                @OnMove.canceled += instance.OnOnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public ControlsActions @Controls => new ControlsActions(this);

    // Launch
    private readonly InputActionMap m_Launch;
    private ILaunchActions m_LaunchActionsCallbackInterface;
    private readonly InputAction m_Launch_Launch;
    public struct LaunchActions
    {
        private @Actions m_Wrapper;
        public LaunchActions(@Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Launch => m_Wrapper.m_Launch_Launch;
        public InputActionMap Get() { return m_Wrapper.m_Launch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LaunchActions set) { return set.Get(); }
        public void SetCallbacks(ILaunchActions instance)
        {
            if (m_Wrapper.m_LaunchActionsCallbackInterface != null)
            {
                @Launch.started -= m_Wrapper.m_LaunchActionsCallbackInterface.OnLaunch;
                @Launch.performed -= m_Wrapper.m_LaunchActionsCallbackInterface.OnLaunch;
                @Launch.canceled -= m_Wrapper.m_LaunchActionsCallbackInterface.OnLaunch;
            }
            m_Wrapper.m_LaunchActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Launch.started += instance.OnLaunch;
                @Launch.performed += instance.OnLaunch;
                @Launch.canceled += instance.OnLaunch;
            }
        }
    }
    public LaunchActions @Launch => new LaunchActions(this);

    // GameTouch
    private readonly InputActionMap m_GameTouch;
    private IGameTouchActions m_GameTouchActionsCallbackInterface;
    private readonly InputAction m_GameTouch_TapMove;
    public struct GameTouchActions
    {
        private @Actions m_Wrapper;
        public GameTouchActions(@Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TapMove => m_Wrapper.m_GameTouch_TapMove;
        public InputActionMap Get() { return m_Wrapper.m_GameTouch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameTouchActions set) { return set.Get(); }
        public void SetCallbacks(IGameTouchActions instance)
        {
            if (m_Wrapper.m_GameTouchActionsCallbackInterface != null)
            {
                @TapMove.started -= m_Wrapper.m_GameTouchActionsCallbackInterface.OnTapMove;
                @TapMove.performed -= m_Wrapper.m_GameTouchActionsCallbackInterface.OnTapMove;
                @TapMove.canceled -= m_Wrapper.m_GameTouchActionsCallbackInterface.OnTapMove;
            }
            m_Wrapper.m_GameTouchActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TapMove.started += instance.OnTapMove;
                @TapMove.performed += instance.OnTapMove;
                @TapMove.canceled += instance.OnTapMove;
            }
        }
    }
    public GameTouchActions @GameTouch => new GameTouchActions(this);
    private int m_controlsSchemeIndex = -1;
    public InputControlScheme controlsScheme
    {
        get
        {
            if (m_controlsSchemeIndex == -1) m_controlsSchemeIndex = asset.FindControlSchemeIndex("controls");
            return asset.controlSchemes[m_controlsSchemeIndex];
        }
    }
    private int m_TouchscreenSchemeIndex = -1;
    public InputControlScheme TouchscreenScheme
    {
        get
        {
            if (m_TouchscreenSchemeIndex == -1) m_TouchscreenSchemeIndex = asset.FindControlSchemeIndex("Touchscreen");
            return asset.controlSchemes[m_TouchscreenSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IControlsActions
    {
        void OnOnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface ILaunchActions
    {
        void OnLaunch(InputAction.CallbackContext context);
    }
    public interface IGameTouchActions
    {
        void OnTapMove(InputAction.CallbackContext context);
    }
}
